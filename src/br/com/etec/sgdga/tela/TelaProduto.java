/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.etec.sgdga.tela;

import br.com.etec.sgdga.control.BasicFornecedor;
import br.com.etec.sgdga.control.BasicProduto;
import br.com.etec.sgdga.control.ControleFornecedor;
import br.com.etec.sgdga.control.ControleProduto;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class TelaProduto extends javax.swing.JFrame {

    DefaultTableModel tmProdutos = new DefaultTableModel(null, new String[]{"Nome", "Fornecedor", "V.custo", "V.Final", "Estoque"}) {
        @Override
        public boolean isCellEditable(int rowIndex, int mColIndex) {
            return false;
        }
    };
    ListSelectionModel lsmProduto;
    List<BasicProduto> produtos;
    List<BasicFornecedor> fornecedores;
    String tipoCadastro = null;

    public TelaProduto() {
        initComponents();
        atualizarProduto();
        fornecedores = new ControleFornecedor().listarFornecedores("%%");
        cbFornecedor.removeAllItems();

        for (int i = 0; i < fornecedores.size(); i++) {
            cbFornecedor.addItem(fornecedores.get(i).getNome());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbFornecedor = new javax.swing.JComboBox();
        txtValorCusto = new javax.swing.JTextField();
        txtValorFinal = new javax.swing.JTextField();
        txtEstoque = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbProduto = new javax.swing.JTable();
        txtPesquisar = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnNovo = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnDeletar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Produtos");
        setMinimumSize(new java.awt.Dimension(570, 470));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Nome:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel1, gridBagConstraints);

        txtNome.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(txtNome, gridBagConstraints);

        jLabel2.setText("Fornecedor:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("Valor de Custo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel3, gridBagConstraints);

        jLabel4.setText("Valor Final:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel4, gridBagConstraints);

        jLabel5.setText("Estoque:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel5, gridBagConstraints);

        cbFornecedor.setEditable(true);
        cbFornecedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbFornecedor.setEnabled(false);
        cbFornecedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbFornecedorMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 38;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(cbFornecedor, gridBagConstraints);

        txtValorCusto.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 78;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(txtValorCusto, gridBagConstraints);

        txtValorFinal.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 78;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(txtValorFinal, gridBagConstraints);

        txtEstoque.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(txtEstoque, gridBagConstraints);

        tbProduto.setModel(tmProdutos);
        tbProduto.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsmProduto = tbProduto.getSelectionModel();
        lsmProduto.addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent e){
                tbProdutoLinhaSelecionada(tbProduto);
            }
        });
        jScrollPane1.setViewportView(tbProduto);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 469;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        getContentPane().add(txtPesquisar, gridBagConstraints);

        btnPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/etec/sgdga/res/img/32/magnifier.png"))); // NOI18N
        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(btnPesquisar, gridBagConstraints);

        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/etec/sgdga/res/img/32/package_add.png"))); // NOI18N
        btnNovo.setText("Novo");
        btnNovo.setToolTipText("");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(btnNovo, gridBagConstraints);

        btnAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/etec/sgdga/res/img/32/pencil.png"))); // NOI18N
        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(btnAlterar, gridBagConstraints);

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/etec/sgdga/res/img/32/disk.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.setEnabled(false);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(btnSalvar, gridBagConstraints);

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/etec/sgdga/res/img/32/cancel.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setEnabled(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(btnCancelar, gridBagConstraints);

        btnDeletar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/etec/sgdga/res/img/32/package_delete.png"))); // NOI18N
        btnDeletar.setText("Deletar");
        btnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(btnDeletar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel1, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 0, 0));
        jLabel6.setText("Registra Produto");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jLabel6, gridBagConstraints);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/etec/sgdga/res/img/32/update.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(jButton1, gridBagConstraints);

        jLabel7.setText("Pesquisar Por Nome");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        getContentPane().add(jLabel7, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    protected void tbProdutoLinhaSelecionada(JTable tb) {
        if (tb.getSelectedRow() != -1) {
            txtNome.setText(produtos.get(tb.getSelectedRow()).getNome());
            selecionaFornecedor(produtos.get(tb.getSelectedRow()).getFornecedor());
            txtValorCusto.setText(String.valueOf(produtos.get(tb.getSelectedRow()).getValor_custo()));
            txtValorFinal.setText(String.valueOf(produtos.get(tb.getSelectedRow()).getValor_final()));
            txtEstoque.setText(String.valueOf(produtos.get(tb.getSelectedRow()).getEstoque()));

        } else {
            limpaCampos();
        }
    }

    private void selecionaFornecedor(int idFornecedor) {

        for (int i = 0; i < fornecedores.size(); i++) {
            if (fornecedores.get(i).getId() == idFornecedor) {
                cbFornecedor.setSelectedIndex(i);
                return;
            }

        }

    }

    protected void listarProduto() {
        ControleProduto produ = new ControleProduto();
        produtos = produ.listarProdutos("%" + txtPesquisar.getText().trim() + "%");
        mostrarProduto(produtos);
    }

    protected void mostrarProduto(List<BasicProduto> produ) {

        while (tmProdutos.getRowCount() > 0) {
            tmProdutos.removeRow(0);
        }

        if (produ.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nenhum Registro Encontrado", "Erro", 0);
        } else {

            String[] campos = new String[]{null, null, null, null, null};
            for (int i = 0; i < produ.size(); i++) {
                tmProdutos.addRow(campos);

                tmProdutos.setValueAt(produ.get(i).getNome(), i, 0);
                tmProdutos.setValueAt(produ.get(i).getFornecedor(), i, 1);
                tmProdutos.setValueAt(produ.get(i).getValor_custo(), i, 2);
                tmProdutos.setValueAt(produ.get(i).getValor_final(), i, 3);
                tmProdutos.setValueAt(produ.get(i).getEstoque(), i, 4);
            }
        }

    }

    private boolean verificarEstoque() {

        try {
            if (Integer.parseInt(txtEstoque.getText()) > 0) {
                return true;
            }
        } catch (NumberFormatException n) {
            JOptionPane.showMessageDialog(rootPane, "Preenchimento incorreto\n Aceita somente numeros maiores que 0", "Aviso", 0);
        }

        return false;
    }

    private boolean verificarValorC() {

        try {
            if (Double.parseDouble(txtValorCusto.getText()) > 0) {
                return true;
            }
        } catch (NumberFormatException n) {
            JOptionPane.showMessageDialog(rootPane, "Preenchimento incorreto\n Aceita somente numeros maiores que 0", "Aviso", 0);
        }

        return false;
    }

    private boolean verificarValorF() {

        try {
            if (Double.parseDouble(txtValorFinal.getText()) > 0) {
                return true;
            }
        } catch (NumberFormatException n) {
            JOptionPane.showMessageDialog(rootPane, "Preenchimento incorreto\n Aceita somente numeros maiores que 0", "Aviso", 0);
        }

        return false;
    }

    protected boolean verificarCampos() {

        int a = txtNome.getText().length();
        int b = cbFornecedor.getSelectedIndex();//
        int c = txtValorCusto.getText().length();
        int d = txtValorFinal.getText().length();
        int e = txtEstoque.getText().length();
        if (verificarEstoque() && verificarValorC() && verificarValorF()) {
            if (a > 0 && a < 26) {
                if (b > -1) {
                    if (c > 0 && c < 19) {
                        if (d > 0 && d < 19) {
                            if (e > 0 && e < 12) {
                                return true;
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Preenchimento incorreto\nEste campo deve conter de 1 a 11 caracteres", "Aviso", 0);
                                txtEstoque.requestFocus();
                                return false;
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Preenchimento incorreto\nEste campo deve conter de 1 a 18 caracteres", "Aviso", 0);
                            txtValorFinal.requestFocus();
                            return false;
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Preenchimento incorreto\nEste campo deve conter de 1 a 18 caracteres", "Aviso", 0);
                        txtValorCusto.requestFocus();
                        return false;
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Preenchimento incorreto\nSelecione um item na lista", "Aviso", 0);
                    cbFornecedor.requestFocus();
                    return false;
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Preenchimento incorreto\nEste campo deve conter de 3 a 25 caracteres", "Aviso", 0);
                txtNome.requestFocus();
                return false;

            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Vereficar os valores", "Aviso", 0);
               
            return false;
        }
    }

    protected void cadastraProduto() {

        if (verificarCampos()) {
            BasicProduto produto = new BasicProduto();
            produto.setNome(txtNome.getText().trim());
            produto.setFornecedor(fornecedores.get(cbFornecedor.getSelectedIndex()).getId());
            produto.setValor_custo(Double.parseDouble(txtValorCusto.getText().trim()));
            produto.setValor_final(Double.parseDouble(txtValorFinal.getText().trim()));
            produto.setEstoque(Integer.parseInt(txtEstoque.getText().trim()));

            ControleProduto pro = new ControleProduto();
            pro.cadastrarProdutos(produto);
            JOptionPane.showMessageDialog(this, "Registro feito com sucesso\n" + produto.getNome(), "Registro", 1);
            desabilitarCampos();
        }

    }

    protected void habilitarCampos() {

        txtNome.setEditable(true);
        cbFornecedor.setEnabled(true);
        txtValorCusto.setEditable(true);
        txtValorFinal.setEditable(true);
        txtEstoque.setEditable(true);
        btnSalvar.setEnabled(true);
        btnAlterar.setEnabled(false);
        btnNovo.setEnabled(false);
        btnDeletar.setEnabled(false);
        tbProduto.setEnabled(false);
        btnPesquisar.setEnabled(false);
        txtPesquisar.setEnabled(false);
        btnCancelar.setEnabled(true);
    }

    protected void desabilitarCampos() {
        txtNome.setEditable(false);
        cbFornecedor.setEnabled(false);
        txtValorCusto.setEditable(false);
        txtValorFinal.setEditable(false);
        txtEstoque.setEditable(false);
        btnSalvar.setEnabled(false);
        btnAlterar.setEnabled(true);
        btnNovo.setEnabled(true);
        btnDeletar.setEnabled(true);
        tbProduto.setEnabled(true);
        btnPesquisar.setEnabled(true);
        txtPesquisar.setEnabled(true);
        btnCancelar.setEnabled(false);
    }

    private void limpaCampos() {
        txtNome.setText("");
        cbFornecedor.setSelectedIndex(-1);
        txtValorCusto.setText("");
        txtValorFinal.setText("");
        txtEstoque.setText("");
    }

    protected void alteraProduto() {
        if (tbProduto.getSelectedRow() != -1) {
            habilitarCampos();
        } else {
            JOptionPane.showMessageDialog(this, "Nenhum Registro Selecionado na Tabela", "Erro", 0);
        }
    }

    protected void alterarProduto() {
        if (verificarCampos()) {
            BasicProduto produto = new BasicProduto();
            produto.setId(produtos.get(tbProduto.getSelectedRow()).getId());
            produto.setNome(txtNome.getText().trim());
            produto.setFornecedor(fornecedores.get(cbFornecedor.getSelectedIndex()).getId());
            produto.setValor_custo(Double.parseDouble(txtValorCusto.getText().trim()));
            produto.setValor_final(Double.parseDouble(txtValorFinal.getText().trim()));
            produto.setEstoque(Integer.parseInt(txtEstoque.getText().trim()));

            ControleProduto pro = new ControleProduto();
            pro.alterarProdutos(produto);
            JOptionPane.showMessageDialog(this, "Registro alterado com sucesso\n" + produto.getNome(), "Registro", 1);
            desabilitarCampos();
        }
    }

    private void novoProduto() {
        habilitarCampos();
        limpaCampos();
    }
//

    protected void atualizarProduto() {
        ControleProduto pro = new ControleProduto();
        produtos = pro.listarProdutos("%%");
        ExibeProduto(produtos);
    }

    protected void ExibeProduto(List<BasicProduto> produ) {

        while (tmProdutos.getRowCount() > 0) {
            tmProdutos.removeRow(0);
        }

        if (!produ.isEmpty()) {

            String[] campos = new String[]{null, null, null, null, null};
            for (int i = 0; i < produ.size(); i++) {
                tmProdutos.addRow(campos);

                tmProdutos.setValueAt(produ.get(i).getNome(), i, 0);
                tmProdutos.setValueAt(produ.get(i).getFornecedor(), i, 1);
                tmProdutos.setValueAt(produ.get(i).getValor_custo(), i, 2);
                tmProdutos.setValueAt(produ.get(i).getValor_final(), i, 3);
                tmProdutos.setValueAt(produ.get(i).getEstoque(), i, 4);
            }
        }

    }

    //
    protected void excluirProduto() {
        if (tbProduto.getSelectedRow() != -1) {
            int res = JOptionPane.showConfirmDialog(this, "Deseja apagar este registro?", "Confirmação", JOptionPane.YES_NO_OPTION, 2);
            if (res == JOptionPane.YES_OPTION) {
                ControleProduto prod = new ControleProduto();
                prod.excluirProduto(produtos.get(tbProduto.getSelectedRow()).getId());
                JOptionPane.showMessageDialog(this, "Registro apagado com sucesso", "Registro", 0);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nenhum Registro Selecionado na Tabela", "Erro", 0);
        }
    }
    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        listarProduto();
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
        excluirProduto();
        atualizarProduto();
    }//GEN-LAST:event_btnDeletarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limpaCampos();
        desabilitarCampos();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        switch (tipoCadastro) {
            case "novo":
                cadastraProduto();
                break;
            case "alteracao":
                alterarProduto();
                break;
        }

        atualizarProduto();
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        tipoCadastro = "alteracao";

        alteraProduto();
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        novoProduto();
        tipoCadastro = "novo";
    }//GEN-LAST:event_btnNovoActionPerformed

    private void cbFornecedorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbFornecedorMouseClicked
        int c = cbFornecedor.getItemCount();
        if (c == 0) {
            TelaFornecedor cidade = new TelaFornecedor();
            cidade.setVisible(true);
            cidade.setState(JFrame.NORMAL);
        }
    }//GEN-LAST:event_cbFornecedorMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        fornecedores = new ControleFornecedor().listarFornecedores("%%");
        cbFornecedor.removeAllItems();

        for (int i = 0; i < fornecedores.size(); i++) {
            cbFornecedor.addItem(fornecedores.get(i).getNome());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaProduto.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TelaProduto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox cbFornecedor;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tbProduto;
    private javax.swing.JTextField txtEstoque;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtPesquisar;
    private javax.swing.JTextField txtValorCusto;
    private javax.swing.JTextField txtValorFinal;
    // End of variables declaration//GEN-END:variables
}
